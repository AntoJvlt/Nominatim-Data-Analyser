{"version":3,"sources":["assets/icons/arrow-right.svg","assets/icons/arrow-down.svg","components/Layer.js","components/LoadingIndicator.js","components/LayersList.js","assets/icons/github.svg","assets/icons/left-arrow.svg","components/MainMenu.js","assets/icons/location-pin.svg","ol-map-logic/ClusteredFeaturesLayer.js","ol-map-logic/GeoJSONFeaturesLayer.js","ol-map-logic/VectorTileFeaturesLayer.js","ol-map-logic/FeaturesLayerFactory.js","assets/icons/cross.svg","components/MapContainer.js","assets/icons/menu.svg","components/InformationPanel.js","App.js","reportWebVitals.js","index.js"],"names":["DOC_TITLE_MAPPING","Layer","layerData","selectedLayer","setSelectedLayer","useState","isToggle","setToggle","useEffect","id","renderDocElement","docKey","docTitle","className","linkTarget","onClick","name","alt","src","ArrowDownIcon","ArrowRightIcon","LoadingIndicator","area","size","promiseInProgress","usePromiseTracker","type","color","height","width","LayersList","layers","setLayers","loadAndWaitLayers","a","trackPromise","loadLayers","requestInit","method","cache","fetch","config","WEB_PATH","json","layersURL","loadedLayers","layerURL","indexOf","push","map","layer","MainMenu","isMenuToggle","setMenuToggle","LeftArrowIcon","autoHeight","autoHeightMax","GithubIcon","href","target","rel","FILTERED_PROPERTY_KEYS","ClusteredFeaturesLayer","mediumSize","bigSize","getFeatureSize","this","textFill","Fill","greenFill","orangeFill","redFill","singleIconStyle","Style","image","Icon","LocationPin","scale","styleCache","feature","style","radius","Math","max","min","dash","PI","Circle","stroke","Stroke","lineDash","lineCap","fill","getFillBySize","text","Text","toString","coordinates","overlay","popup","properties","getFeatureProperties","re_numeric","out","p","hasOwnProperty","value","includes","match","data_type","charAt","slice","splitted","split","toUpperCase","n","w","r","replace","GeoJSONFeaturesLayer","layerDefinition","get","length","source_url","VectorLayer","source","Cluster","distance","SourceVector","url","Date","getTime","format","GeoJSON","getStyle","originalFeatures","extent","createEmpty","forEach","f","index","array","extend","getGeometry","getExtent","resolution","getView","getResolutionForExtent","targetZoom","getZoomForResolution","location","getCenter","animate","center","zoom","duration","current","innerHTML","constructPopupContent","setPosition","getProperties","VectorTileFeaturesLayer","VectorTileLayer","VectorTileSource","MVT","featureClass","Feature","tileGrid","createXYZ","maxZoom","FeaturesLayerFactory","MapContainer","setMap","currentOlFeaturesLayer","setCurrentOlFeaturesLayer","currentFeaturesLayer","setCurrentFeaturesLayer","setOverlay","clickBindKey","setClickBindKey","mapContainer","useRef","popupCloser","popupContent","Overlay","element","autoPan","autoPanAnimation","initialMap","Map","TileLayer","OSM","overlays","view","View","minZoom","onclick","undefined","removeLayer","featureLayer","constructFeaturesLayer","olFeaturesLayer","olLayer","addLayer","unByKey","on","onMapClick","event","hit","forEachFeatureAtPixel","pixel","onFeatureClick","coordinate","hitTolerance","ref","CrossIcon","InformationPanel","setInfoPanelDisplayed","renderTrackHorizontal","props","display","App","isInfoPanelDisplayed","MenuIcon","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2c069280.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/arrow-right.33d644da.svg\";","export default __webpack_public_path__ + \"static/media/arrow-down.ec23fbbb.svg\";","import ArrowRightIcon from '../assets/icons/arrow-right.svg';\nimport ArrowDownIcon from '../assets/icons/arrow-down.svg';\nimport ReactMarkdown from 'react-markdown';\nimport { useEffect, useState } from 'react';\n\n/**\n * Map the keys of the layer documentation to a more\n * elaborate value.\n */\nconst DOC_TITLE_MAPPING = {\n    'description': 'Description of the layer',\n    'why_problem': 'Why are these data wrong',\n    'how_to_fix': 'How to fix these errors'\n};\n\n/**\n * Handles one layer item of the main menu. It can be expanded to display the layer's content when clicking on its title.\n * @param {object} props\n * @param {object} props.layerData Data of this layer.\n * @param {object} props.selectedLayer Current selected layer among all the layers.\n * @param {CallableFunction} props.setSelectedLayer Callback to update the state of selectedLayer.\n */\nconst Layer = ( { layerData, selectedLayer, setSelectedLayer } ) => {\n    /**\n     * State handling if this layer is opened or closed (its content data are displayed\n     * only if its toggle).\n     */\n    const [isToggle, setToggle] = useState(false);\n\n    /**\n     * When the state of selectedLayer change, we should check if the new selectedLayer is\n     * equal to the current layer. If it is, we set isToggle to true, otherwise to false.\n     */\n    useEffect(() => {\n        setToggle(selectedLayer && selectedLayer.id === layerData.id)\n    }, [selectedLayer])\n\n    /**\n     * Generate JSX content of one documentation item based on its key. It is rendered\n     * only if the layer is toggle and if the layer data well contains this documentation key.\n     * \n     * The key is displayed as the value mapped in DOC_TITLE_MAPPING.\n     * @param {string} docKey Key of the documentation item we want to render.\n     * @returns JSX content of the documentation item.\n     */\n    const renderDocElement = (docKey) => {\n        if (isToggle && docKey in layerData['doc']) {\n            const docTitle = docKey in DOC_TITLE_MAPPING ? DOC_TITLE_MAPPING[docKey] : docKey;\n            return (\n                <div>              \n                    <p className='layer-doc-title'>{docTitle}:</p>\n                    <ReactMarkdown className='layer-doc-content' linkTarget='_blank'>{layerData['doc'][docKey]}</ReactMarkdown>\n                </div>\n            );\n        }\n        return null;\n    }\n\n    return (\n        <div className={`layer-wrapper ${isToggle ? 'layer-toggle' : ''}`}>\n            <div className='layer-title-arrow-wrapper' onClick={() => setSelectedLayer(isToggle ? null : layerData)}>\n                <h3>{layerData.name}</h3>\n                <div className=\"flex-one\"></div>\n                <img className='layer-arrow-icon' alt='Reset city sort icon' src={isToggle ? ArrowDownIcon : ArrowRightIcon}/>\n            </div>\n            <div className={`layer-data-wrapper ${isToggle ? 'layer-data-toggle' : ''}`}>\n                {renderDocElement('description')}\n                {renderDocElement('why_problem')}\n                {renderDocElement('how_to_fix')}\n            </div>\n        </div>\n    )\n}\n\nexport default Layer\n","import { usePromiseTracker } from \"react-promise-tracker\";\r\nimport Loader from 'react-loader-spinner';\r\n\r\n/**\r\n * Loading indicator for when we are waiting for a promise.\r\n */\r\nconst LoadingIndicator = ( {area, size, className} ) => {\r\n    const { promiseInProgress } = usePromiseTracker({area: area});\r\n    return (\r\n        <div>\r\n            {promiseInProgress && \r\n            <div className={className}>\r\n                <Loader type=\"ThreeDots\" color=\"#82b9ff\" height={size} width={size} />\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoadingIndicator\r\n","import { trackPromise } from 'react-promise-tracker';\nimport { useEffect, useState } from 'react';\nimport config from '../config/config.json';\nimport Layer from './Layer';\nimport LoadingIndicator from './LoadingIndicator';\n\n/**\n * Handles the loading and display of all layers.\n * @param {object} props\n * @param {object} props.selectedLayer Current selected layer among all the layers.\n * @param {CallableFunction} props.setSelectedLayer Callback to update the state of selectedLayer.\n */\nconst LayersList = ( { selectedLayer, setSelectedLayer } ) => {\n    /**\n     * State which contains all the layers.\n     */\n    const [layers, setLayers] = useState([]);\n\n    /**\n     * Layers are loaded from the server when the component is\n     * initialized.\n     */\n    useEffect(() => {\n        loadAndWaitLayers()\n    }, [])\n\n    /**\n     * Wrapper function needed to track all the promises (with trackPromise()) \n     * executed in loadLayers() at once.\n     */\n    const loadAndWaitLayers = async () => {\n        await trackPromise(loadLayers(), 'layers-fetch');\n    }\n\n    /**\n     * Load layers.json files from the remote server.\n     * For each layer, its data content is loaded from the remove server as well.\n     */\n    const loadLayers = async () => {\n        const requestInit = {\n            method: 'GET',\n            cache: 'no-cache'\n        };\n        const layersURL = await (await fetch(`${config.WEB_PATH}/layers.json`, requestInit)).json();\n        const loadedLayers = []\n        if (layersURL) {\n            for (const layerURL of layersURL.layers) {\n                const layerData = await (await fetch(layerURL, requestInit)).json()\n                //Set the id to an unique id.\n                layerData['id'] = layersURL.layers.indexOf(layerURL);\n                loadedLayers.push(layerData)\n            }\n            setLayers(loadedLayers);\n        }\n    }\n\n    return (\n        <div className='layers-list-wrapper'>\n            <LoadingIndicator size={60} area='layers-fetch' className='layers-loading-indicator'/>\n            {layers.map(layer => <Layer key={layer.id} layerData={layer} selectedLayer={selectedLayer} setSelectedLayer={setSelectedLayer}/>)}\n        </div>\n    )\n}\n\nexport default LayersList\n","export default __webpack_public_path__ + \"static/media/github.e0df113a.svg\";","export default __webpack_public_path__ + \"static/media/left-arrow.956c5d42.svg\";","import { Scrollbars } from 'react-custom-scrollbars-2';\nimport LayersList from \"./LayersList\"\nimport GithubIcon from '../assets/icons/github.svg';\nimport LeftArrowIcon from '../assets/icons/left-arrow.svg';\n\n/**\n * Handles the content of the main menu.\n * @param {object} props\n * @param {boolean} props.isMenuToggle Defines if the menu is toggle or not.\n * @param {CallableFunction} props.setMenuToggle Callback to update the state of isMenuToggle.\n * @param {object} props.selectedLayer Current selected layer among all the layers.\n * @param {CallableFunction} props.setSelectedLayer Callback to update the state of selectedLayer.\n */\nconst MainMenu = ( { isMenuToggle, setMenuToggle, selectedLayer, setSelectedLayer } ) => {\n    return (\n        <section className={`main-menu-wrapper ${!isMenuToggle ? 'not-toggle' : ''}`}>\n            <div className='menu-title-wrapper'>\n                <h1>Nominatim QA</h1>\n                <div className='flex-one'></div>\n                <img src={LeftArrowIcon} alt='menu icon' className='menu-icon' onClick={() => setMenuToggle(!isMenuToggle)}/>\n            </div>\n            <p className='layers-label'>Layers:</p>\n            <Scrollbars autoHeight autoHeightMax={'100%'}>\n                <LayersList selectedLayer={selectedLayer} setSelectedLayer={setSelectedLayer}/>\n            </Scrollbars>\n            <div className='flex-one'></div>\n            <div className='github-wrapper'>\n                <img src={GithubIcon} alt='github icon'/>\n                <a href='https://github.com/AntoJvlt/Nominatim-Data-Analyser' target='_blank' rel=\"noreferrer\">osm-search/Nominatim-Data-Analyser</a>\n            </div>\n        </section>\n    )\n}\n\nexport default MainMenu\n","export default __webpack_public_path__ + \"static/media/location-pin.8a57e079.svg\";","import { Style, Circle, Stroke, Fill, Text, Icon } from \"ol/style\";\nimport LocationPin from '../assets/icons/location-pin.svg';\n\n/**\n * Filter containing all the keys which should be ignored when\n * the properties of a feature are rendered.\n */\nconst FILTERED_PROPERTY_KEYS = [\n    'geometry',\n    'layer'\n]\n\n/**\n * Class handling the logic of a clustered features layer.\n */\nclass ClusteredFeaturesLayer {\n    constructor(mediumSize, bigSize, getFeatureSize) {\n        this.mediumSize = mediumSize;\n        this.bigSize = bigSize;\n        this.getFeatureSize = getFeatureSize;\n        this.textFill = new Fill({color: '#fff'});\n        this.greenFill = new Fill({color:\"rgba(0,128,0,1)\"});\n        this.orangeFill = new Fill({color:\"rgba(255,128,0,1)\"});\n        this.redFill = new Fill({color:\"rgba(192,0,0,1)\"});\n        this.singleIconStyle = new Style({\n            image: new Icon({\n                src: LocationPin,\n                scale: 1.2\n              }),\n        });\n        this.styleCache = {};\n    }\n\n    /**\n     * Returns a Fill object different based on the size given in parameter. This function is needed\n     * to not recreate a Fill object whenever we render a feature.\n     * @param {number} size Size of the feature.\n     * @returns {Fill} OpenLayers Fill object corresponding to the size. \n     */\n    getFillBySize(size) {\n        return size>this.bigSize ? this.redFill : size>this.mediumSize ? this.orangeFill : this.greenFill;\n    }\n\n    /**\n     * Generate the OpenLayers Style for the given feature. The style is dynamically\n     * generated based on the clustered feature size and other parameters.\n     * @returns {Style} OpenLayers style of the feature.\n     */\n    getStyle(feature){\n        var size = this.getFeatureSize(feature);\n        var style = this.styleCache[size];\n        if (!style) {\n            if (size === 1) {\n                style = this.styleCache[size] = this.singleIconStyle;\n            }else {\n                const color = size>this.bigSize ? '192,0,0' : size>this.mediumSize ? '255,128,0' : '0,128,0';\n                var radius = Math.max(8, Math.min(size*0.15, 20));\n                var dash = 2*Math.PI*radius/6;\n                var dash = [ 0, dash, dash, dash, dash, dash, dash ];\n                style = this.styleCache[size] = new Style({\n                    image: new Circle({\n                        radius: radius,\n                        stroke: new Stroke({\n                        color: \"rgba(\"+color+\",0.5)\", \n                        width: 15 ,\n                        lineDash: dash,\n                        lineCap: \"butt\"\n                        }),\n                        fill: this.getFillBySize(size)\n                    }),\n                    text: new Text({\n                        text: size.toString(),\n                        fill: this.textFill\n                    })\n                });\n            }\n        }\n        return style;\n    }\n\n    /**\n     * Called when a feature of this layer has been clicked.\n     * This method should be overriden by the child classes.\n     */\n    onFeatureClick(feature, coordinates, map, overlay, popup) {\n        return;\n    }\n\n    /**\n     * Returns the properties of the given feature object.\n     * This method should be overriden by the child classes.\n     */\n    getFeatureProperties(feature) {\n        return {};\n    }\n\n    /**\n     * Generate the content of the popup. The content is the HTML representation of the\n     * features properties.\n     * \n     * If the key of the property follows a specific pattern, its value get replaced by a link to\n     * the OpenStreetMap matching feature (based on its osm_id).\n     * @returns {String} HTML content in String format.\n     */\n    constructPopupContent(feature) {\n        const properties = this.getFeatureProperties(feature);\n        const re_numeric = /^[0-9]+$/;\n        var out = '';\n        \n        for (var p in properties) {\n            if (properties.hasOwnProperty(p)) {\n                var value = properties[p].toString();\n                if (FILTERED_PROPERTY_KEYS.includes(p)) {\n                    continue;\n                } else if ((p === 'node_id' || p === 'way_id' || p === 'relation_id' || p.match('^[nwr]\\/@id')) && value.match(re_numeric)) {\n                    //Get the data type ('n' or 'w' or 'r')\n                    const data_type = p.charAt(0)\n                    if (p.match('^[nwr]\\/@id')) {\n                        p = p.slice(5)\n                    } else {\n                        //For example transform 'node_id' into 'Node ID'\n                        const splitted = p.split('_')\n                        p = splitted[0].charAt(0).toUpperCase() + splitted[0].slice(1) + ' ' + splitted[1].toUpperCase()\n                    }\n                    const types_mapping = {\n                        n: 'node',\n                        w: 'way',\n                        r: 'relation'\n                    }\n                    value = '<a target=\"_blank\" href=\"https://www.openstreetmap.org/' + types_mapping[data_type] + '/' + value + '\">' + value + '</a>';\n                } else if (p === 'timestamp') {\n                    p = 'Timestamp';\n                    value = value.replace(/^([0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9])T([0-9][0-9]:[0-9][0-9]:[0-9][0-9])Z$/, \"$1 $2\");\n                }\n                out += `<p><span class='bold'>${p}</span>: ${value}</p>`;\n            }\n        }\n        return out;\n    }\n}\n\nexport default ClusteredFeaturesLayer;","import SourceVector from 'ol/source/Vector';\nimport { Vector as VectorLayer } from 'ol/layer';\nimport GeoJSON from 'ol/format/GeoJSON';\nimport {Cluster} from 'ol/source';\nimport ClusteredFeaturesLayer from './ClusteredFeaturesLayer';\nimport {createEmpty, extend, getCenter} from 'ol/extent';\n\n/**\n * Handles the logic for a features layer with a GeoJSON source.\n */\nclass GeoJSONFeaturesLayer extends ClusteredFeaturesLayer {\n    constructor(layerDefinition) {\n        const getFeatureSize = (feature) => feature.get('features').length;\n        super(8, 25, getFeatureSize);\n        this.source_url = 'geojson_url' in layerDefinition ? layerDefinition['geojson_url'] : '';\n    }\n\n    /**\n     * Construct the OpenLayers layer with the right informations and with a geojson source.\n     * The current date is added to the source_url in order to avoid caching by\n     * the browser or server.\n     */\n    get olLayer() {\n        const layer = new VectorLayer({\n            source: new Cluster({\n                distance: 80,\n                source: new SourceVector({\n                    url: this.source_url + '?time='+ new Date().getTime(),\n                    format: new GeoJSON()\n                }),\n            }),\n            style: (feature) => this.getStyle(feature)\n        });\n        return layer;\n    }\n\n    /**\n     * Called when a feature of this layer has been clicked.\n     * If the feature is a cluster, the map's view is zoomed to this\n     * feature in order to display its child features.\n     * \n     * If the feature is not a cluster, the popup is opened with the well constructed content inside.\n     */\n    onFeatureClick(feature, coordinates, map, overlay, popup) {\n        var originalFeatures = feature.get('features');\n        if (originalFeatures.length > 1){\n            var extent = new createEmpty();\n            originalFeatures.forEach(function(f, index, array){\n                extend(extent, f.getGeometry().getExtent());\n            });\n            var resolution = map.getView().getResolutionForExtent(extent);\n            var targetZoom = map.getView().getZoomForResolution(resolution);\n            var location = getCenter(extent);\n            map.getView().animate({\n                center: location,\n                zoom: targetZoom,\n                duration: 1000\n            })\n        }else {\n            popup.current.innerHTML = this.constructPopupContent(feature);\n            overlay.setPosition(coordinates); \n        }\n    }\n\n    /**\n     * Returns the properties of the given feature object.\n     */\n    getFeatureProperties(feature) {\n        return feature.get('features')[0].getProperties();\n    }\n}\n\nexport default GeoJSONFeaturesLayer;","import 'ol/ol.css';\nimport Feature from 'ol/Feature';\nimport VectorTileLayer from 'ol/layer/VectorTile';\nimport VectorTileSource from 'ol/source/VectorTile';\nimport MVT from 'ol/format/MVT';\nimport ClusteredFeaturesLayer from './ClusteredFeaturesLayer';\nimport {createXYZ} from 'ol/tilegrid';\n\n/**\n * Handles the logic for a features layer with a VectorTile source.\n */\nclass VectorTileFeaturesLayer extends ClusteredFeaturesLayer {\n    constructor(layerDefinition) {\n        const getFeatureSize = (feature) => {\n            if (feature.get('cluster')) {\n                return feature.get('point_count'); \n            }else {\n                return 1;\n            }\n        }\n        super(80, 500, getFeatureSize);\n        this.source_url = 'vector_tile_url' in layerDefinition ? layerDefinition['vector_tile_url'] : '';\n    }\n\n    /**\n     * Construct the OpenLayers layer with the right informations and with a vector tile source.\n     * The current date is added to the source_url in order to avoid caching by\n     * the browser or server.\n     */\n    get olLayer() {\n        const layer = new VectorTileLayer({\n            source: new VectorTileSource({\n                format: new MVT({\n                  featureClass: Feature\n                }),\n                tileGrid: new createXYZ({maxZoom: 15}),\n                url: this.source_url + '?time='+ new Date().getTime()\n            }),\n            style: (feature) => this.getStyle(feature)\n        });\n        return layer;\n    }\n\n    /**\n     * Called when a feature of this layer has been clicked.\n     * If the feature is a cluster, the map's view is zoomed to this\n     * feature in order to display its child features.\n     * \n     * If the feature is not a cluster, the popup is opened with the well constructed content inside.\n     */\n    onFeatureClick(feature, coordinates, map, overlay, popup) {\n        if (feature.get('cluster')){\n            map.getView().animate({\n                center: coordinates,\n                zoom: feature.get('clusterExpansionZoom'),\n                duration: 1000\n            })\n        }else {\n            popup.current.innerHTML = this.constructPopupContent(feature);\n            overlay.setPosition(coordinates); \n        }\n    }\n\n    /**\n     * Returns the properties of the given feature object.\n     */\n    getFeatureProperties(feature) {\n        return feature.getProperties();\n    }\n}\n\nexport default VectorTileFeaturesLayer;","import GeoJSONFeaturesLayer from \"./GeoJSONFeaturesLayer\";\nimport VectorTileFeaturesLayer from \"./VectorTileFeaturesLayer\";\n\n/**\n * Factory to create the right features layers based on the layer definition.\n */\nclass FeaturesLayerFactory {\n    static constructFeaturesLayer(layerDefinition) {\n        if ('geojson_url' in layerDefinition) {\n            return new GeoJSONFeaturesLayer(layerDefinition)\n        }else if ('vector_tile_url') {\n            return new VectorTileFeaturesLayer(layerDefinition);\n        }else {\n            return null;\n        }\n    }\n}\n\nexport default FeaturesLayerFactory;","export default __webpack_public_path__ + \"static/media/cross.fa7e5ead.svg\";","import { useEffect, useState, useRef } from \"react\";\nimport 'ol/ol.css';\nimport Map from 'ol/Map';\nimport OSM from 'ol/source/OSM';\nimport TileLayer from 'ol/layer/Tile';\nimport View from 'ol/View';\nimport FeaturesLayerFactory from \"../ol-map-logic/FeaturesLayerFactory\";\nimport {unByKey} from 'ol/Observable';\nimport Overlay from 'ol/Overlay';\nimport CrossIcon from '../assets/icons/cross.svg';\n\n/**\n * Contains the OpenLayers map with its logic.\n * @param {object} props\n * @param {object} props.selectedLayer Current selected layer among all the layers.\n */\nconst MapContainer = ( { selectedLayer } ) => {\n    /**\n     * State containing the Openlayers map.\n     */\n    const [map, setMap] = useState();\n    /**\n     * State containing the current OpenLayers layer of features. Its reference\n     * is needed to remove it from the map when the selected layer change.\n     */\n    const [currentOlFeaturesLayer, setCurrentOlFeaturesLayer] = useState(null);\n    /**\n     * Current feature layer which contains the layer data extracted from the remote server.\n     */\n    const [currentFeaturesLayer, setCurrentFeaturesLayer] = useState(null);\n    /**\n     * OpenLayers map overlay displayed when clicking on a feature.\n     */\n    const [overlay, setOverlay] = useState(null);\n    /**\n     * Key of the event binding for the map.on('click). Used to reset the click event\n     * when we want to change the callback.\n     */\n    const [clickBindKey, setClickBindKey] = useState(null);\n    const mapContainer = useRef();\n    const popup = useRef();\n    const popupCloser = useRef();\n    const popupContent = useRef();\n\n    /**\n     * When the component is loaded, we initialize the openlayers map and overlay.\n     */\n    useEffect(() => {\n        const overlay = new Overlay({\n            element: popup.current,\n            autoPan: true,\n            autoPanAnimation: {\n              duration: 250,\n            },\n        });\n        setOverlay(overlay);\n\n        const initialMap = new Map({\n            layers: [\n                new TileLayer({\n                source: new OSM(),\n                })\n            ],\n            overlays: [overlay],\n            target: mapContainer.current,\n            view: new View({\n                center: [0, 0],\n                zoom: 1,\n                minZoom: 1\n            })\n        })\n        setMap(initialMap);\n\n        popupCloser.current.onclick = function () {\n            overlay.setPosition(undefined);\n            return false;\n        };\n    }, [])\n\n    /**\n     * When the state of selectedLayer change, the openlayers features layer is updated\n     * to match the new selected layer.\n     */\n    useEffect(() => {\n        if (map) {\n            if (currentOlFeaturesLayer) {\n                map.removeLayer(currentOlFeaturesLayer);\n                setCurrentOlFeaturesLayer(null);\n                setCurrentFeaturesLayer(null);\n            }\n            overlay.setPosition(undefined);\n            if (selectedLayer) {\n                const featureLayer = FeaturesLayerFactory.constructFeaturesLayer(selectedLayer)\n                setCurrentFeaturesLayer(featureLayer);\n                const olFeaturesLayer = FeaturesLayerFactory.constructFeaturesLayer(selectedLayer).olLayer;\n                setCurrentOlFeaturesLayer(olFeaturesLayer);\n                map.addLayer(olFeaturesLayer);\n            }\n        }\n    }, [selectedLayer])\n\n    /**\n     * The onMapClick() function call a method from currentFeaturesLayer so we need to\n     * update the onMapClick callback whenever the currentFeaturesLayer state change.\n     */\n    useEffect(() => {\n        if (map && currentFeaturesLayer) {\n            if (clickBindKey) {\n                unByKey(clickBindKey);\n            }\n            setClickBindKey(map.on(['click'], onMapClick));\n        }\n    }, [currentFeaturesLayer])\n\n    /**\n     * Called whenever the map is clicked.\n     * The onFeatureClick() of the currentFeaturesLayer is called if\n     * one feature has been clicked.\n     */\n    const onMapClick = (event) => {\n        var hit = false;\n        if (map) {\n            overlay.setPosition(undefined);\n            map.forEachFeatureAtPixel(\n                event.pixel,\n                function (feature) {\n                    //Only keep the first hit\n                    if (!hit) {\n                        hit = true;\n                        currentFeaturesLayer.onFeatureClick(feature, event.coordinate, map, overlay, popupContent);\n                    }\n                },\n                {\n                    hitTolerance: 3\n                }\n            );\n        }\n    }\n\n    return (\n        <div className='map-container'>\n            <section ref={mapContainer} id='map'></section>\n            <div ref={popup} className=\"ol-popup\">\n                <div className='popup-header'>\n                    <p>Properties</p>\n                    <div className='flex-one'></div>\n                    <img src={CrossIcon} alt='close icon popup' ref={popupCloser} className=\"ol-popup-close-icon\"/>\n                </div>\n                {/* <div className='ol-popup-content-wrapper'> */}\n                <div ref={popupContent} className='ol-popup-content'></div>\n            </div>\n        </div>\n    )\n}\n\nexport default MapContainer\n","export default __webpack_public_path__ + \"static/media/menu.b088df50.svg\";","import Scrollbars from \"react-custom-scrollbars-2\"\nimport CrossIcon from '../assets/icons/cross.svg';\n\n/**\n * Display information on an absolute panel displayed on top of the map.\n * @param {object} props\n * @param {CallableFunction} props.setInfoPanelDisplayed Callback to set hide or display this information panel.\n */\nconst InformationPanel = ({ setInfoPanelDisplayed }) => {\n    return (\n        <section className='information-panel'>\n            <Scrollbars autoHeight autoHeightMax={'100%'} renderTrackHorizontal={props => <div {...props} style={{display: 'none'}} className=\"track-horizontal\"/>}>\n                <div className='information-panel-title-wrapper'>\n                    <h2>Welcome to the <span className='blue-text'>Nominatim QA</span> Tool!</h2>\n                    <div className='flex-one'></div>\n                    <button className='information-panel-close-button' onClick={() => setInfoPanelDisplayed(false)}>\n                        <img src={CrossIcon} alt='close icon' className=\"information-panel-close-icon\"/>\n                    </button>\n                </div>\n                <p>\n                    This tool helps to improve the OpenStreetMap data quality by extracting suspect data from the <a href='https://nominatim.org/' target='_blank' rel=\"noreferrer\">Nominatim</a> database. You can contribute to the development of this tool through the <a href='https://github.com/AntoJvlt/Nominatim-Data-Analyser' target='_blank' rel=\"noreferrer\">github repository</a>.\n                </p>\n                <p>\n                    The suspect data are distributed among multiple layers. You can find these layers in the menu on the left of your screen. Feel free to check the data and to correct them if you live near some of them!\n                </p>\n                <p>\n                    We do not have a \"report false positive\" feature implemented yet. If you find a lot of data which should not be considered as errors, please come to the \"Issues\" section of the <a href='https://github.com/AntoJvlt/Nominatim-Data-Analyser/issues' target='_blank' rel=\"noreferrer\">github repository</a> to discuss this.\n                </p>\n                <p className='italic-text'>\n                    /!\\ You might encounter some performance issues with some layers if you are using the Firefox browser. Please switch of browser if this is the case. /!\\\n                </p>\n            </Scrollbars>\n        </section>\n    )\n}\n\nexport default InformationPanel\n","import './App.css';\nimport { useState } from 'react'\nimport MainMenu from './components/MainMenu';\nimport MapContainer from './components/MapContainer';\nimport MenuIcon from './assets/icons/menu.svg';\nimport InformationPanel from './components/InformationPanel';\n\nfunction App() {\n  const [selectedLayer, setSelectedLayer] = useState(null);\n  const [isMenuToggle, setMenuToggle] = useState(true);\n  const [isInfoPanelDisplayed, setInfoPanelDisplayed] = useState(true);\n\n  return (\n    <div className=\"app\">\n      <MainMenu isMenuToggle={isMenuToggle} setMenuToggle={setMenuToggle} selectedLayer={selectedLayer} setSelectedLayer={setSelectedLayer}/>\n      <MapContainer selectedLayer={selectedLayer}/>\n      {\n        isInfoPanelDisplayed &&\n        <InformationPanel setInfoPanelDisplayed={setInfoPanelDisplayed}/>\n      }\n      {\n        !isMenuToggle &&\n        <div className='absolute-menu-icon-wrapper'>\n          <img src={MenuIcon} alt='menu icon' className='menu-icon absolute-menu-icon' onClick={() => setMenuToggle(!isMenuToggle)}/>\n        </div>\n      }\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}